[1mdiff --git a/Partie1.md b/Partie1.md[m
[1mindex b7da3f0..a2996dd 100644[m
[1m--- a/Partie1.md[m
[1m+++ b/Partie1.md[m
[36m@@ -14,11 +14,11 @@[m
 **üìÅ [`logement.sql`](https://github.com/AyoubLADJICI/Logement-eco-responsable/blob/main/logement.sql)** ```lignes 15 √† 20```[m
 - Cela est possible gr√¢ce √† la commande ```DROP TABLE IF EXISTS nom_table;```[m
 - Je me suis appuy√© sur les ressources disponibles dans le cours de base de donn√©es sur Moodle.[m
[31m-- Ce **[`site`](https://www.devart.com/dbforge/sql/studio/sql-server-drop-table.html)** m'a aussi aid√© pour r√©pondre √† cette question, il pr√©sente les diff√©rentes fa√ßons d'utiliser DROP TABLE dans SQL.[m
[32m+[m[32m- Ce **[`site`](https://www.devart.com/dbforge/sql/studio/sql-server-drop-table.html)** m'a aussi aid√© pour r√©pondre √† cette question, il pr√©sente les diff√©rentes fa√ßons d'utiliser ```DROP TABLE``` dans SQL.[m[41m[m
 [m
 **Question 3 :** Les ordres SQL permettant de cr√©er toutes les tables de notre base se trouve dans le fichier :[m
 **üìÅ [`logement.sql`](https://github.com/AyoubLADJICI/Logement-eco-responsable/blob/main/logement.sql)** ```lignes 28 √† 93```[m
[31m-- Cela est possible gr√¢ce √† la commande ```CRATE TABLE nom_table(id_nom_table INTEGER PRIMARY KEY AUTOINCREMENT, nom_champ type_champ,..., FOREIGN KEY (id_Ad) REFERENCES Adresse(id_autre_table)); ```[m
[32m+[m[32m- Cela est possible gr√¢ce √† la commande ```CREATE TABLE nom_table(id_nom_table INTEGER PRIMARY KEY AUTOINCREMENT, nom_champ type_champ,..., FOREIGN KEY (id_Ad) REFERENCES Adresse(id_autre_table)); ```[m[41m[m
 - Je me suis appuy√© sur les ressources disponibles dans le cours de base de donn√©es sur Moodle.[m
 - J'ai entr√© le prompt suivant ```Peux-tu me lister tous les types en SQL et dans quels cas est-il judicieux de les utiliser ?``` sur ChatGPT afin de pouvoir associer chaque champ au type ad√©quat. [m
 - INTEGER ‚Üí Pour les identifiants uniques et les r√©f√©rences entre tables[m
[36m@@ -56,7 +56,7 @@[m [mLa fonction de remplissage se trouve dans le fichier : **üìÅ [`remplissage.py`][m
 [m
 - La fonction ajouter_factures permet d'ajouter des factures "r√©alistes" pour un logement donn√© sur une p√©riode d√©finie (exemple 30 jours). Exemple : ```ajouter_factures(1, 30)```[m
 - Les valeurs de consommation et les montants sont calcul√©s en fonction des plages pr√©d√©finies pour chaque type de consommation. La fonction fait √©galement en sorte d'√©viter les doublons en v√©rifiant les factures d√©j√† pr√©sentes dans la base de donn√©es pour la m√™me date et le m√™me type.[m
[31m-[m
[32m+[m[32m- Pour ma simulation, j'ai cr√©√© 3 logements pr√©alablement poss√®dant une consommation propre √† leur logement, par exemple, le premier logement consomme beaucoup d'eau donc il aura une plage de consommation d'eau tr√®s grande, de m√™me pour le deuxi√®me logement o√π la consommation d'Internet et d'√©lectricit√© est √©norme tandis que le troisi√®me logement est plus √©cologique.[m[41m[m
 - Ensuite j'ai entr√© un autre prompt ```Peux-tu me faire la m√™me chose mais pour ajouter des valeurs de mesures pour chaque capteur/actionneur 1 fois chaque jour pendant une dur√©e que je pourrai choisir ?``` sur ChatGPT.[m
 [m
 - La fonction ajouter_mesures permet d'ajouter des mesures pour chaque capteur/actionneur sur une p√©riode d√©finie. Exemple : ```ajouter_mesures(30)```[m
[1mdiff --git a/__pycache__/database.cpython-310.pyc b/__pycache__/database.cpython-310.pyc[m
[1mdeleted file mode 100644[m
[1mindex affa5d5..0000000[m
Binary files a/__pycache__/database.cpython-310.pyc and /dev/null differ
[1mdiff --git a/__pycache__/main.cpython-310.pyc b/__pycache__/main.cpython-310.pyc[m
[1mdeleted file mode 100644[m
[1mindex 932fe22..0000000[m
Binary files a/__pycache__/main.cpython-310.pyc and /dev/null differ
[1mdiff --git a/__pycache__/models.cpython-310.pyc b/__pycache__/models.cpython-310.pyc[m
[1mdeleted file mode 100644[m
[1mindex e41617f..0000000[m
Binary files a/__pycache__/models.cpython-310.pyc and /dev/null differ
[1mdiff --git a/__pycache__/routes.cpython-310.pyc b/__pycache__/routes.cpython-310.pyc[m
[1mdeleted file mode 100644[m
[1mindex 25ada22..0000000[m
Binary files a/__pycache__/routes.cpython-310.pyc and /dev/null differ
[1mdiff --git a/logement.db b/logement.db[m
[1mindex 152440d..1da6c65 100644[m
Binary files a/logement.db and b/logement.db differ
[1mdiff --git a/main.py b/main.py[m
[1mdeleted file mode 100644[m
[1mindex f5650ea..0000000[m
[1m--- a/main.py[m
[1m+++ /dev/null[m
[36m@@ -1,641 +0,0 @@[m
[31m-from typing import Annotated,Optional, List[m
[31m-from fastapi import Depends, FastAPI, HTTPException, Query, Request, Path, Body[m
[31m-from sqlmodel import Field, Session, SQLModel, create_engine, select[m
[31m-from fastapi.responses import HTMLResponse, JSONResponse[m
[31m-from fastapi.staticfiles import StaticFiles[m
[31m-from fastapi.templating import Jinja2Templates[m
[31m-import requests[m
[31m-import pandas as pd[m
[31m-from datetime import datetime, timedelta [m
[31m-from sqlalchemy.sql import func[m
[31m-[m
[31m-# Mod√®les de donn√©es SQLModel[m
[31m-class Logement(SQLModel, table=True):[m
[31m-    id_logement : int = Field(default = None, primary_key = True)[m
[31m-    adresse_postale : str = Field(index=True)[m
[31m-    numero_telephone : str = Field(index=True)[m
[31m-    adresse_ip : str = Field(index=True)[m
[31m-    date_insertion: Optional[datetime] = Field(default_factory=datetime.utcnow)[m
[31m-[m
[31m-class Piece(SQLModel, table=True):[m
[31m-    id_piece : int = Field(default = None, primary_key = True)[m
[31m-    nom : str = Field(index=True)[m
[31m-    coord_x : int = Field(index=True)[m
[31m-    coord_y : int = Field(index=True)[m
[31m-    coord_z : int = Field(index=True)[m
[31m-    id_logement : int = Field(index=True) [m
[31m-[m
[31m-class Capteur_Actionneur(SQLModel, table=True):[m
[31m-    id_capteur_actionneur : int = Field(default = None, primary_key = True)[m
[31m-    id_type : int = Field(index=True)[m
[31m-    nom : str = Field(index=True)[m
[31m-    reference_commerciale : str = Field(index=True)[m
[31m-    reference_piece : int = Field(index=True)[m
[31m-    port_communication : str = Field(index=True)[m
[31m-    date_insertion: Optional[datetime] = Field(default_factory=datetime.utcnow)[m
[31m-    etat: str = Field(default="ON")  # Nouveau champ ON/OFF (Ajoute lors de la partie 3)[m
[31m-[m
[31m-class Type_Capteur_Actionneur(SQLModel, table=True):[m
[31m-    id_type_capteur_actionneur : int = Field(default = None, primary_key = True)[m
[31m-    nom_type : str = Field(index=True)[m
[31m-    unite : str = Field(index=True)[m
[31m-    min_valeur : float = Field(index=True)[m
[31m-    max_valeur : float = Field(index=True)[m
[31m- [m
[31m-class Mesure(SQLModel, table=True):[m
[31m-    id_mesure: int = Field(default=None, primary_key=True)[m
[31m-    id_capteur_actionneur: int[m
[31m-    valeur: float[m
[31m-    date_insertion: Optional[datetime] = Field(default_factory=datetime.utcnow)[m
[31m-[m
[31m-class Facture(SQLModel, table=True):[m
[31m-    id_facture: int = Field(default=None, primary_key=True)[m
[31m-    id_logement: int = Field(index=True)[m
[31m-    type_facture: str = Field(index=True)[m
[31m-    date_facture: Optional[datetime] = Field(default_factory=datetime.utcnow)[m
[31m-    montant: float = Field(index=True)[m
[31m-    valeur_consommation: float = Field(index=True)[m
[31m-[m
[31m-# Creation de notre moteur SQLModel [m
[31m-# pour permettre a notre code de se connecter a notre base de donnees[m
[31m-sqlite_file_name = "logement.db"[m
[31m-sqlite_url = f"sqlite:///{sqlite_file_name}"[m
[31m-[m
[31m-#L'utilisation de check_same_thread=False permet √† FastAPI d'utiliser la m√™me base de donn√©es SQLite dans diff√©rents threads[m
[31m-#Ceci est n√©cessaire car une seule requ√™te peut utiliser plus d'un thread (par exemple dans les d√©pendances)[m
[31m-#toutefois FastAPI s'assure qu'une session SQLModel distincte est cr√©√©e pour chaque requ√™te HTTP[m
[31m-connect_args = {"check_same_thread" : False} [m
[31m-engine = create_engine(sqlite_url, connect_args=connect_args)    [m
[31m-[m
[31m-# Fonction permettant de creer les tables pour[m
[31m-# tous les modeles de table dans notre BDD[m
[31m-def create_db_and_tables():[m
[31m-    SQLModel.metadata.create_all(engine)[m
[31m-[m
[31m-# Fonction permettant de stocker les objets en memoire[m
[31m-# Utilise le moteur pour communiquer avec la BDD[m
[31m-def get_session():[m
[31m-    with Session(engine) as session:[m
[31m-        yield session #Garantit une seule session pour chaque requete[m
[31m-[m
[31m-SessionDep = Annotated[Session, Depends(get_session)][m
[31m-[m
[31m-app = FastAPI()[m
[31m-# Monter le dossier static pour servir les fichiers CSS[m
[31m-app.mount("/static", StaticFiles(directory="static"), name="static")[m
[31m-[m
[31m-# Configuration des templates[m
[31m-templates = Jinja2Templates(directory="templates")[m
[31m-[m
[31m-# Creation des tables de la BDD au demarrage de l'application[m
[31m-@app.on_event("startup")[m
[31m-def on_startup():[m
[31m-    create_db_and_tables()[m
[31m-[m
[31m-#Chaque modele SQLModel est un modele Pydantic[m
[31m-#ce qui facilite la conversion des donn√©es entre[m
[31m-#les formats json et Python[m
[31m-@app.post("/logement/")[m
[31m-def create_logement(logement: Logement, session: Session = Depends(get_session)):[m
[31m-    session.add(logement)[m
[31m-    session.commit()[m
[31m-    session.refresh(logement)[m
[31m-    return logement[m
[31m-[m
[31m-#Fonction permettant de lire les logements de la base de donn√©es[m
[31m-#a l'aide de la fonction select[m
[31m-@app.get("/logements/")[m
[31m-def read_logement(session: Session = Depends(get_session), offset: int = 0, limit: Annotated[int, Query(le=100)]=100,):[m
[31m-    logements = session.exec(select(Logement).offset(offset).limit(limit)).all()[m
[31m-    return logements[m
[31m-[m
[31m-@app.get("/logements/{id_logement}")[m
[31m-def read_logement(id_logement: int, session: Session = Depends(get_session)):[m
[31m-    logement = session.get(Logement, id_logement)[m
[31m-    if not logement:[m
[31m-        raise HTTPException(status_code=404, detail="Logement not found")[m
[31m-    return logement[m
[31m-[m
[31m-@app.delete("/logements/{logement_id}")[m
[31m-def delete_logement(id_logement: int, session: Session = Depends(get_session)):[m
[31m-    logement = session.get(Logement, id_logement)[m
[31m-    if not logement:[m
[31m-        raise HTTPException(status_code=404, detail="Logement Not Found")[m
[31m-    session.delete(logement)[m
[31m-    session.commit()[m
[31m-    return {"ok": True}[m
[31m-[m
[31m-# Endpoints pour Piece[m
[31m-@app.post("/piece/")[m
[31m-def create_piece(piece: Piece, session: Session = Depends(get_session)):[m
[31m-    session.add(piece)[m
[31m-    session.commit()[m
[31m-    session.refresh(piece)[m
[31m-    return piece[m
[31m-[m
[31m-@app.get("/pieces/")[m
[31m-def read_pieces(session: Session = Depends(get_session), offset: int = 0, limit: Annotated[int, Query(le=100)] = 100):[m
[31m-    pieces = session.exec(select(Piece).offset(offset).limit(limit)).all()[m
[31m-    return pieces[m
[31m-[m
[31m-@app.get("/pieces/{id_piece}")[m
[31m-def read_piece(id_piece: int, session: Session = Depends(get_session)):[m
[31m-    piece = session.get(Piece, id_piece)[m
[31m-    if not piece:[m
[31m-        raise HTTPException(status_code=404, detail="Piece not found")[m
[31m-    return piece[m
[31m-[m
[31m-@app.delete("/pieces/{id_piece}")[m
[31m-def delete_piece(id_piece: int, session: Session = Depends(get_session)):[m
[31m-    piece = session.get(Piece, id_piece)[m
[31m-    if not piece:[m
[31m-        raise HTTPException(status_code=404, detail="Piece not found")[m
[31m-    session.delete(piece)[m
[31m-    session.commit()[m
[31m-    return {"ok": True}[m
[31m-[m
[31m-# Endpoints pour Capteur_Actionneur[m
[31m-@app.post("/capteur_actionneur/")[m
[31m-def create_capteurs_actionneurs(capteurs: List[Capteur_Actionneur], session: Session = Depends(get_session)):[m
[31m-    try:[m
[31m-        for capteur in capteurs:[m
[31m-            session.add(capteur)[m
[31m-        session.commit()[m
[31m-        for capteur in capteurs:[m
[31m-            session.refresh(capteur)[m
[31m-        return {"message": "Capteurs ajout√©s avec succ√®s"}[m
[31m-    except Exception as e:[m
[31m-        session.rollback()[m
[31m-        raise HTTPException(status_code=400, detail=f"Erreur lors de l'ajout des capteurs : {str(e)}")[m
[31m-[m
[31m-@app.get("/capteurs_actionneurs/")[m
[31m-def read_capteurs_actionneurs(session: Session = Depends(get_session), offset: int = 0, limit: Annotated[int, Query(le=100)] = 100):[m
[31m-    capteurs_actionneurs = session.exec(select(Capteur_Actionneur).offset(offset).limit(limit)).all()[m
[31m-    return capteurs_actionneurs[m
[31m-[m
[31m-@app.get("/capteurs_actionneurs/{id_capteur_actionneur}")[m
[31m-def read_capteur_actionneur(id_capteur_actionneur: int, session: Session = Depends(get_session)):[m
[31m-    capteur_actionneur = session.get(Capteur_Actionneur, id_capteur_actionneur)[m
[31m-    if not capteur_actionneur:[m
[31m-        raise HTTPException(status_code=404, detail="Capteur/Actionneur not found")[m
[31m-    return capteur_actionneur[m
[31m-[m
[31m-@app.delete("/capteurs_actionneurs/{id_capteur_actionneur}")[m
[31m-def delete_capteur_actionneur(id_capteur_actionneur: int, session: Session = Depends(get_session)):[m
[31m-    capteur_actionneur = session.get(Capteur_Actionneur, id_capteur_actionneur)[m
[31m-    if not capteur_actionneur:[m
[31m-        raise HTTPException(status_code=404, detail="Capteur/Actionneur not found")[m
[31m-    session.delete(capteur_actionneur)[m
[31m-    session.commit()[m
[31m-    return {"ok": True}[m
[31m-[m
[31m-# Endpoints pour Type_Capteur_Actionneur[m
[31m-@app.post("/type_capteur_actionneur/")[m
[31m-def create_type_capteur_actionneur(type_capteur_actionneur: Type_Capteur_Actionneur, session: Session = Depends(get_session)):[m
[31m-    session.add(type_capteur_actionneur)[m
[31m-    session.commit()[m
[31m-    session.refresh(type_capteur_actionneur)[m
[31m-    return type_capteur_actionneur[m
[31m-[m
[31m-@app.get("/types_capteurs_actionneurs/")[m
[31m-def read_types_capteurs_actionneurs(session: Session = Depends(get_session), offset: int = 0, limit: Annotated[int, Query(le=100)] = 100):[m
[31m-    types_capteurs_actionneurs = session.exec(select(Type_Capteur_Actionneur).offset(offset).limit(limit)).all()[m
[31m-    return types_capteurs_actionneurs[m
[31m-[m
[31m-@app.get("/types_capteurs_actionneurs/{id_type_capteur_actionneur}")[m
[31m-def read_type_capteur_actionneur(id_type_capteur_actionneur: int, session: Session = Depends(get_session)):[m
[31m-    type_capteur_actionneur = session.get(Type_Capteur_Actionneur, id_type_capteur_actionneur)[m
[31m-    if not type_capteur_actionneur:[m
[31m-        raise HTTPException(status_code=404, detail="Type Capteur/Actionneur not found")[m
[31m-    return type_capteur_actionneur[m
[31m-[m
[31m-@app.delete("/types_capteurs_actionneurs/{id_type_capteur_actionneur}")[m
[31m-def delete_type_capteur_actionneur(id_type_capteur_actionneur: int, session: Session = Depends(get_session)):[m
[31m-    type_capteur_actionneur = session.get(Type_Capteur_Actionneur, id_type_capteur_actionneur)[m
[31m-    if not type_capteur_actionneur:[m
[31m-        raise HTTPException(status_code=404, detail="Type Capteur/Actionneur not found")[m
[31m-    session.delete(type_capteur_actionneur)[m
[31m-    session.commit()[m
[31m-    return {"ok": True}[m
[31m-[m
[31m-# Endpoints pour Mesure[m
[31m-@app.post("/mesures/")[m
[31m-def create_mesure(mesure: Mesure, session: Session = Depends(get_session)):[m
[31m-    session.add(mesure)[m
[31m-    session.commit()[m
[31m-    session.refresh(mesure)[m
[31m-    return mesure[m
[31m-[m
[31m-@app.get("/mesures/")[m
[31m-def read_mesures(session: Session = Depends(get_session), offset: int = 0, limit: Annotated[int, Query(le=100)] = 100):[m
[31m-    mesures = session.exec(select(Mesure).offset(offset).limit(limit)).all()[m
[31m-    return mesures[m
[31m-[m
[31m-@app.delete("/mesures/{id}")[m
[31m-def delete_mesure(id: int, session: Session = Depends(get_session)):[m
[31m-    mesure = session.get(Mesure, id)[m
[31m-    if not mesure:[m
[31m-        raise HTTPException(status_code=404, detail="Mesure not found")[m
[31m-    session.delete(mesure)[m
[31m-    session.commit()[m
[31m-    return {"ok": True}[m
[31m-[m
[31m-# Endpoints pour Facture[m
[31m-@app.post("/factures/")[m
[31m-def create_facture(facture: Facture, session: Session = Depends(get_session)):[m
[31m-    session.add(facture)[m
[31m-    session.commit()[m
[31m-    session.refresh(facture)[m
[31m-    return facture[m
[31m-[m
[31m-@app.get("/factures/")[m
[31m-def read_factures(session: Session = Depends(get_session), offset: int = 0, limit: Annotated[int, Query(le=100)] = 100):[m
[31m-    factures = session.exec(select(Facture).offset(offset).limit(limit)).all()[m
[31m-    return factures[m
[31m-[m
[31m-@app.delete("/factures/{id}")[m
[31m-def delete_facture(id: int, session: Session = Depends(get_session)):[m
[31m-    facture = session.get(Facture, id)[m
[31m-    if not facture:[m
[31m-        raise HTTPException(status_code=404, detail="Facture not found")[m
[31m-    session.delete(facture)[m
[31m-    session.commit()[m
[31m-    return {"ok": True}[m
[31m-[m
[31m-@app.get("/factures/chart", response_class=HTMLResponse)[m
[31m-async def chart_factures(request: Request, session: Session = Depends(get_session), id_logement: int = None):[m
[31m-    """[m
[31m-    Affiche les factures sous forme de camembert 3D.[m
[31m-    Si id_logement est fourni, filtre les factures par logement.[m
[31m-    """[m
[31m-    query = select(Facture)[m
[31m-    if id_logement:[m
[31m-        query = query.where(Facture.id_logement == id_logement)[m
[31m-[m
[31m-    factures = session.exec(query).all()[m
[31m-[m
[31m-    # Regrouper par type et sommer les montants[m
[31m-    totals = {}[m
[31m-    for facture in factures:[m
[31m-        totals[facture.type_facture] = totals.get(facture.type_facture, 0) + facture.montant[m
[31m-[m
[31m-    # Pr√©parer les donn√©es pour Google Charts[m
[31m-    data = [["Type de Facture", "Montant Total"]][m
[31m-    for type_facture, total in totals.items():[m
[31m-        data.append([type_facture, total])[m
[31m-[m
[31m-    # R√©cup√©rer la liste des logements pour la liste d√©roulante[m
[31m-    logements = session.exec(select(Logement.id_logement, Logement.adresse_postale)).all()[m
[31m-    logements_list = [{"id": logement[0], "adresse": logement[1]} for logement in logements][m
[31m-[m
[31m-    return templates.TemplateResponse([m
[31m-        "chart.html",[m
[31m-        {"request": request, "data": data, "logements": logements_list, "selected_id": id_logement}[m
[31m-    )[m
[31m-    [m
[31m-def fetch_open_meteo_weather(latitude, longitude):[m
[31m-    try:[m
[31m-        url = "https://api.open-meteo.com/v1/forecast"[m
[31m-        params = {[m
[31m-            "latitude": latitude,[m
[31m-            "longitude": longitude,[m
[31m-            "hourly": ["temperature_2m", "relative_humidity_2m", "rain"][m
[31m-        }[m
[31m-        response = requests.get(url, params=params)[m
[31m-        response.raise_for_status()  # D√©clenche une exception pour les erreurs HTTP[m
[31m-        data = response.json()[m
[31m-[m
[31m-        if "hourly" not in data:[m
[31m-            raise ValueError("Donn√©es horaires manquantes dans la r√©ponse.")[m
[31m-[m
[31m-        # Process data[m
[31m-        hourly_data = {[m
[31m-            "date": data["hourly"]["time"],[m
[31m-            "temperature_2m": data["hourly"]["temperature_2m"],[m
[31m-            "relative_humidity_2m": data["hourly"]["relative_humidity_2m"],[m
[31m-            "rain": data["hourly"]["rain"][m
[31m-        }[m
[31m-        return pd.DataFrame(hourly_data)[m
[31m-    except requests.exceptions.RequestException as e:[m
[31m-        raise ValueError(f"Erreur de connexion √† Open-Meteo : {str(e)}")[m
[31m-    except KeyError as e:[m
[31m-        raise ValueError(f"Cl√© manquante dans la r√©ponse : {str(e)}")[m
[31m-[m
[31m-@app.get("/openmeteo/{latitude}/{longitude}")[m
[31m-def get_open_meteo_weather(latitude: float, longitude: float):[m
[31m-    try:[m
[31m-        data = fetch_open_meteo_weather(latitude, longitude)[m
[31m-        return JSONResponse(content=data.to_dict(orient="records"))[m
[31m-    except ValueError as ve:[m
[31m-        raise HTTPException(status_code=400, detail=str(ve))[m
[31m-    except Exception as e:[m
[31m-        raise HTTPException(status_code=500, detail=f"Erreur interne : {str(e)}")[m
[31m-[m
[31m-@app.get("/openmeteo/", response_class=HTMLResponse)[m
[31m-async def display_open_meteo_data(request: Request):[m
[31m-    """[m
[31m-    Affiche la page HTML pour saisir les coordonn√©es et afficher les donn√©es m√©t√©o en tableau.[m
[31m-    """[m
[31m-    return templates.TemplateResponse("meteo.html", {"request": request})[m
[31m-[m
[31m-# Routes pour servir les pages HTML[m
[31m-@app.get("/", response_class=HTMLResponse)[m
[31m-async def home(request: Request):[m
[31m-    return templates.TemplateResponse("accueil.html", {"request": request})[m
[31m-[m
[31m-@app.get("/confidentialite.html", response_class=HTMLResponse)[m
[31m-async def confidentialite_page(request: Request):[m
[31m-    return templates.TemplateResponse("confidentialite.html", {"request": request})[m
[31m-[m
[31m-@app.get("/consommation", response_class=HTMLResponse)[m
[31m-async def consommation(request: Request):[m
[31m-    return templates.TemplateResponse("consommation.html", {"request": request})[m
[31m-[m
[31m-@app.get("/etat_capteurs", response_class=HTMLResponse)[m
[31m-async def etat_capteurs(request: Request):[m
[31m-    return templates.TemplateResponse("etat_capteurs.html", {"request": request})[m
[31m-[m
[31m-@app.get("/economies", response_class=HTMLResponse)[m
[31m-async def economies(request: Request):[m
[31m-    return templates.TemplateResponse("economies.html", {"request": request})[m
[31m-[m
[31m-@app.get("/configuration", response_class=HTMLResponse)[m
[31m-async def configuration(request: Request):[m
[31m-    return templates.TemplateResponse("configuration.html", {"request": request})[m
[31m-[m
[31m-@app.get("/api/statistics")[m
[31m-def get_statistics(session: Session = Depends(get_session)):[m
[31m-    # R√©cup√©rer les statistiques[m
[31m-    num_logements = len(session.exec(select(Logement)).all())[m
[31m-    num_types_capteurs = len(session.exec(select(Type_Capteur_Actionneur)).all())[m
[31m-    num_capteurs = len(session.exec(select(Capteur_Actionneur)).all())[m
[31m-    num_mesures = len(session.exec(select(Mesure)).all())[m
[31m-[m
[31m-    return {[m
[31m-        "num_logements": num_logements,[m
[31m-        "num_types_capteurs": num_types_capteurs,[m
[31m-        "num_capteurs": num_capteurs,[m
[31m-        "num_mesures": num_mesures,[m
[31m-    }[m
[31m-[m
[31m-@app.get("/api/logements")[m
[31m-def get_logements(session: Session = Depends(get_session)):[m
[31m-    logements = session.exec(select(Logement)).all()[m
[31m-    return [{"id_logement": logement.id_logement, "adresse": logement.adresse_postale, "IP": logement.adresse_ip, "Tel": logement.numero_telephone} for logement in logements][m
[31m-[m
[31m-@app.get("/api/consommation")[m
[31m-def get_consumption_data(session: Session = Depends(get_session), logement_id: Optional[int] = None):[m
[31m-    # Calculer la date de 7 jours en arri√®re[m
[31m-    today = datetime.now()[m
[31m-    seven_days_ago = today - timedelta(days=7)[m
[31m-[m
[31m-    # Construire la requ√™te avec ou sans filtre logement[m
[31m-    query = select(Facture).where(Facture.date_facture >= seven_days_ago).order_by(Facture.date_facture.asc())[m
[31m-[m
[31m-    if logement_id:[m
[31m-        query = query.where(Facture.id_logement == logement_id)[m
[31m-[m
[31m-    # R√©cup√©rer les factures[m
[31m-    factures = session.exec(query).all()[m
[31m-    data = [][m
[31m-    for facture in factures:[m
[31m-        data.append({[m
[31m-            "type": facture.type_facture,      # Type de consommation[m
[31m-            "montant": facture.montant,        # Montant de la facture[m
[31m-            "consommation": facture.valeur_consommation,  # Valeur consomm√©e[m
[31m-            "date": facture.date_facture       # Date de la facture[m
[31m-        })[m
[31m-    return data[m
[31m-[m
[31m-@app.get("/api/pieces_capteurs")[m
[31m-def get_pieces_capteurs(logement_id: int, session: Session = Depends(get_session)):[m
[31m-    pieces = session.exec([m
[31m-        select(Piece).where(Piece.id_logement == logement_id)[m
[31m-    ).all()[m
[31m-[m
[31m-    result = [][m
[31m-    for piece in pieces:[m
[31m-        capteurs = session.exec([m
[31m-            select(Capteur_Actionneur)[m
[31m-            .where(Capteur_Actionneur.reference_piece == piece.id_piece)[m
[31m-        ).all()[m
[31m-        result.append({[m
[31m-            "nom": piece.nom,[m
[31m-            "capteurs": [[m
[31m-                {[m
[31m-                    "id_capteur_actionneur": capteur.id_capteur_actionneur,[m
[31m-                    "nom": capteur.nom,[m
[31m-                    "reference_commerciale": capteur.reference_commerciale,[m
[31m-                    "port_communication" : capteur.port_communication,[m
[31m-                    "etat": capteur.etat[m
[31m-                }[m
[31m-                for capteur in capteurs[m
[31m-            ][m
[31m-        })[m
[31m-    return result[m
[31m-[m
[31m-@app.post("/api/capteur_toggle/{capteur_id}")[m
[31m-def toggle_capteur(capteur_id: int, session: Session = Depends(get_session)):[m
[31m-    capteur = session.get(Capteur_Actionneur, capteur_id)[m
[31m-    if not capteur:[m
[31m-        raise HTTPException(status_code=404, detail="Capteur non trouv√©")[m
[31m-[m
[31m-    # Validation de l'√©tat actuel avant le basculement[m
[31m-    if capteur.etat not in ["ON", "OFF"]:[m
[31m-        raise HTTPException(status_code=400, detail="√âtat invalide pour le basculement")[m
[31m-    [m
[31m-    # Basculer l'√©tat ON/OFF[m
[31m-    capteur.etat = "OFF" if capteur.etat == "ON" else "ON"[m
[31m-[m
[31m-    session.add(capteur)[m
[31m-    session.commit()[m
[31m-    session.refresh(capteur)[m
[31m-[m
[31m-    return {"success": True, "etat": capteur.etat}[m
[31m-[m
[31m-@app.get("/api/economies")[m
[31m-def get_economies(logement_id: int, session: Session = Depends(get_session)):[m
[31m-    data = {[m
[31m-        "electricite": [],[m
[31m-        "eau": [],[m
[31m-        "gaz": [],[m
[31m-        "internet": [][m
[31m-    }[m
[31m-[m
[31m-    query = select([m
[31m-        func.strftime("%Y-%m", Facture.date_facture).label("mois"),[m
[31m-        Facture.type_facture,[m
[31m-        func.sum(Facture.montant).label("montant")[m
[31m-    ).where(Facture.id_logement == logement_id).group_by("mois", Facture.type_facture)[m
[31m-[m
[31m-    results = session.exec(query).all()[m
[31m-    previous_totals = {}[m
[31m-[m
[31m-    for mois, type_facture, montant in results:[m
[31m-        economie = 0[m
[31m-        if type_facture in previous_totals:[m
[31m-            economie = ((previous_totals[type_facture] - montant) / previous_totals[type_facture]) * 100[m
[31m-        previous_totals[type_facture] = montant[m
[31m-[m
[31m-        data[type_facture.lower()].append({[m
[31m-            "mois": mois,[m
[31m-            "montant": montant,[m
[31m-            "economie": round(economie, 2)[m
[31m-        })[m
[31m-[m
[31m-    return data[m
[31m-[m
[31m-[m
[31m-[m
[31m-# ‚ûï Ajouter un logement[m
[31m-@app.post("/api/logements")[m
[31m-def add_logement(logement: Logement, session: Session = Depends(get_session)):[m
[31m-    session.add(logement)[m
[31m-    session.commit()[m
[31m-    session.refresh(logement)[m
[31m-    return {"success": True, "id": logement.id_logement}[m
[31m-[m
[31m-[m
[31m-# ‚úèÔ∏è Modifier un logement[m
[31m-# ‚úÖ Route PUT pour modifier un logement[m
[31m-@app.put("/api/logements/{id_logement}")[m
[31m-def modifier_logement([m
[31m-    id_logement: int = Path(..., description="ID du logement √† modifier"),[m
[31m-    adresse_postale: str = Body(..., description="Nouvelle adresse postale"),[m
[31m-    numero_telephone: str = Body(..., description="Nouveau num√©ro de t√©l√©phone"),[m
[31m-    adresse_ip: str = Body(..., description="Nouvelle adresse IP"),[m
[31m-    session: Session = Depends(get_session)[m
[31m-):[m
[31m-    """[m
[31m-    Modifier les informations d'un logement existant.[m
[31m-    """[m
[31m-    # ‚úÖ R√©cup√©ration du logement existant[m
[31m-    db_logement = session.get(Logement, id_logement)[m
[31m-    if not db_logement:[m
[31m-        raise HTTPException(status_code=404, detail="Logement non trouv√©")[m
[31m-[m
[31m-    # ‚úÖ Mise √† jour des champs[m
[31m-    db_logement.adresse_postale = adresse_postale[m
[31m-    db_logement.numero_telephone = numero_telephone[m
[31m-    db_logement.adresse_ip = adresse_ip[m
[31m-    db_logement.date_insertion = datetime.utcnow()[m
[31m-[m
[31m-    session.commit()[m
[31m-    session.refresh(db_logement)[m
[31m-[m
[31m-    return {[m
[31m-        "message": "Logement modifi√© avec succ√®s",[m
[31m-        "logement": {[m
[31m-            "id_logement": db_logement.id_logement,[m
[31m-            "adresse_postale": db_logement.adresse_postale,[m
[31m-            "numero_telephone": db_logement.numero_telephone,[m
[31m-            "adresse_ip": db_logement.adresse_ip,[m
[31m-            "date_insertion": db_logement.date_insertion[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-# üóëÔ∏è Supprimer un logement[m
[31m-@app.delete("/api/logements/{logement_id}")[m
[31m-def delete_logement(logement_id: int, session: Session = Depends(get_session)):[m
[31m-    logement = session.get(Logement, logement_id)[m
[31m-    if not logement:[m
[31m-        raise HTTPException(status_code=404, detail="Logement non trouv√©")[m
[31m-    session.delete(logement)[m
[31m-    session.commit()[m
[31m-    return {"success": True}[m
[31m-[m
[31m-# Route pour ajouter une pi√®ce[m
[31m-@app.post("/api/pieces/")[m
[31m-def ajouter_piece(piece: Piece, session: Session = Depends(get_session)):[m
[31m-    session.add(piece)[m
[31m-    session.commit()[m
[31m-    session.refresh(piece)[m
[31m-    return {"message": "Pi√®ce ajout√©e avec succ√®s", "id_piece": piece.id_piece}[m
[31m-[m
[31m-[m
[31m-@app.get("/api/pieces")[m
[31m-def get_pieces(session: Session = Depends(get_session), logement_id: Optional[int] = None):[m
[31m-    query = select(Piece)[m
[31m-    if logement_id:[m
[31m-        query = query.where(Piece.id_logement == logement_id)[m
[31m-    pieces = session.exec(query).all()[m
[31m-    return pieces[m
[31m-[m
[31m-# Route pour ajouter un capteur/actionneur[m
[31m-@app.post("/api/capteur_actionneur/")[m
[31m-def ajouter_capteur_actionneur(capteur: Capteur_Actionneur, session: Session = Depends(get_session)):[m
[31m-    if not capteur.reference_commerciale:[m
[31m-        raise HTTPException(status_code=400, detail="La r√©f√©rence commerciale est requise.")[m
[31m-[m
[31m-    session.add(capteur)[m
[31m-    session.commit()[m
[31m-    session.refresh(capteur)[m
[31m-    return capteur[m
[31m-[m
[31m-@app.get("/api/capteurs_actionneurs")[m
[31m-def get_capteurs(session: Session = Depends(get_session), piece_id: Optional[int] = None):[m
[31m-    query = select(Capteur_Actionneur)[m
[31m-    if piece_id:[m
[31m-        query = query.where(Capteur_Actionneur.reference_piece == piece_id)[m
[31m-    capteurs = session.exec(query).all()[m
[31m-    return capteurs[m
[31m-[m
[31m-@app.get("/api/types_capteurs_actionneurs/")[m
[31m-def read_types_capteurs_actionneurs(session: Session = Depends(get_session)):[m
[31m-    types_capteurs_actionneurs = session.exec(select(Type_Capteur_Actionneur)).all()[m
[31m-    return [{"id_type_capteur_actionneur": t.id_type_capteur_actionneur, "nom_type": t.nom_type} for t in types_capteurs_actionneurs][m
[31m-[m
[31m-[m
[31m-@app.put("/api/pieces/{id_piece}")[m
[31m-def modifier_piece(id_piece: int, piece: Piece, session: Session = Depends(get_session)):[m
[31m-    db_piece = session.get(Piece, id_piece)[m
[31m-    if not db_piece:[m
[31m-        raise HTTPException(status_code=404, detail="Pi√®ce non trouv√©e")[m
[31m-    [m
[31m-    db_piece.nom = piece.nom or db_piece.nom[m
[31m-    db_piece.coord_x = piece.coord_x or db_piece.coord_x[m
[31m-    db_piece.coord_y = piece.coord_y or db_piece.coord_y[m
[31m-    db_piece.coord_z = piece.coord_z or db_piece.coord_z[m
[31m-    [m
[31m-    session.commit()[m
[31m-    session.refresh(db_piece)[m
[31m-    return db_piece[m
[31m-[m
[31m-[m
[31m-@app.delete("/api/pieces/{id_piece}")[m
[31m-def supprimer_piece(id_piece: int, session: Session = Depends(get_session)):[m
[31m-    db_piece = session.get(Piece, id_piece)[m
[31m-    if not db_piece:[m
[31m-        raise HTTPException(status_code=404, detail="Pi√®ce non trouv√©e")[m
[31m-    [m
[31m-    session.delete(db_piece)[m
[31m-    session.commit()[m
[31m-    return {"message": "Pi√®ce supprim√©e avec succ√®s"}[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[1mdiff --git a/remplissage.py b/remplissage.py[m
[1mindex d9a6e96..a62b0c2 100644[m
[1m--- a/remplissage.py[m
[1m+++ b/remplissage.py[m
[36m@@ -1,44 +1,23 @@[m
[31m-import sqlite3, random[m
[32m+[m[32mimport sqlite3[m
[32m+[m[32mimport random[m
 from datetime import datetime, timedelta[m
 [m
 # Ouverture/initialisation de la base de donn√©es[m
[31m-conn = sqlite3.connect('logement.db')[m
[32m+[m[32mconn = sqlite3.connect('database.db')[m
 conn.row_factory = sqlite3.Row[m
 c = conn.cursor()[m
 [m
[31m-# Fonction pour ajouter des factures dans la base de donn√©es[m
[32m+[m[32m# Fonction pour ins√©rer des factures dans la base de donn√©es[m
 def ajouter_factures(id_logement, nb_jours):[m
     types_facture = ['Electricite', 'Eau', 'Gaz', 'Internet'][m
     today = datetime.now()[m
 [m
[31m-    if (id_logement == 1):[m
[31m-        plages_consommation = {[m
[31m-            'Electricite': (1, 3),  # 1 √† 3 kWh[m
[31m-            'Eau': (5, 10),         # 5 √† 10 m¬≥[m
[31m-            'Gaz': (10, 20),        # 10 √† 20 m¬≥[m
[31m-            'Internet': (50, 100)   # 50 √† 100 Go[m
[31m-        }[m
[31m-    elif (id_logement == 2): [m
[31m-        plages_consommation = {[m
[31m-            'Electricite': (10, 20),  # 10 √† 20 kWh[m
[31m-            'Eau': (0.5, 2),          # 0.5 √† 2 m¬≥[m
[31m-            'Gaz': (1, 5),            # 1 √† 5 m¬≥[m
[31m-            'Internet': (200, 500)    # 200 √† 500 Go[m
[31m-        }[m
[31m-    elif (id_logement == 3): [m
[31m-        plages_consommation = {[m
[31m-            'Electricite': (0.5, 2),  # 3 √† 2 kWh[m
[31m-            'Eau': (0.1, 1),          # 0.1 √† 1 m¬≥[m
[31m-            'Gaz': (0.1, 0.5),        # 0.1 √† 0.5 m¬≥[m
[31m-            'Internet': (10, 50)      # 10 √† 50 Go[m
[31m-        }[m
[31m-    else:[m
[31m-        plages_consommation = {[m
[31m-            'Electricite': (1, 6),  # 1 √† 6 kWh[m
[31m-            'Eau': (0.5, 3),        # 0.5 √† 3 m¬≥[m
[31m-            'Gaz': (2, 10),         # 2 √† 10 m¬≥[m
[31m-            'Internet': (50, 150)   # 50 √† 150 Go[m
[31m-        }[m
[32m+[m[32m    plages_consommation = {[m
[32m+[m[32m        'Electricite': (1, 8),  # 1 √† 8 kWh[m
[32m+[m[32m        'Eau': (0.5, 3),        # 0.5 √† 3 m¬≥[m
[32m+[m[32m        'Gaz': (2, 10),         # 2 √† 10 m¬≥[m
[32m+[m[32m        'Internet': (50, 300)   # 50 √† 300 Go[m
[32m+[m[32m    }[m
 [m
     for jour in range(nb_jours):[m
         date_facture = (today - timedelta(days=jour)).strftime('%Y-%m-%d')[m
[36m@@ -54,11 +33,12 @@[m [mdef ajouter_factures(id_logement, nb_jours):[m
                 min_val, max_val = plages_consommation.get(type_facture, (0, 0))[m
                 consommation = round(random.uniform(min_val, max_val), 2)[m
                 [m
[32m+[m[32m                # Montant est calcul√© directement ici pour √©viter une valeur incoh√©rente[m
                 tarifs = {[m
[31m-                    'Electricite': 0.2516,  # ‚Ç¨/kWh[m
[31m-                    'Eau': 1.15,            # ‚Ç¨/m¬≥[m
[31m-                    'Gaz': 0.923,           # ‚Ç¨/m¬≥[m
[31m-                    'Internet': 0.23        # ‚Ç¨/Go[m
[32m+[m[32m                    'Electricite': 0.15,  # ‚Ç¨/kWh[m
[32m+[m[32m                    'Eau': 2.0,          # ‚Ç¨/m¬≥[m
[32m+[m[32m                    'Gaz': 0.09,         # ‚Ç¨/kWh ou m¬≥[m
[32m+[m[32m                    'Internet': 0.00495  # ‚Ç¨/Go[m
                 }[m
                 montant = round(consommation * tarifs.get(type_facture, 0), 2)[m
 [m
[36m@@ -66,62 +46,148 @@[m [mdef ajouter_factures(id_logement, nb_jours):[m
                     INSERT INTO Facture (id_logement, type_facture, date_facture, montant, valeur_consommation)[m
                     VALUES (?, ?, ?, ?, ?)[m
                 """, (id_logement, type_facture, date_facture, montant, consommation))[m
[31m-    print(f"‚úÖFactures ajout√©es sur les {nb_jours} derniers jours pour le logement {id_logement}.")[m
[31m-    [m
[31m-    [m
[31m-# ============================================================[m
[31m-# üìä Fonction pour ajouter des mesures dans la base de donn√©es[m
[31m-# ============================================================[m
[32m+[m[32m    print(f"Factures ajout√©es pour {nb_jours} jours pour le logement {id_logement}.")[m
[32m+[m
[32m+[m[32mdef trier_factures():[m
[32m+[m[32m    # Trier les factures par date et par ID[m
[32m+[m[32m    c.execute("""[m
[32m+[m[32m        SELECT *[m
[32m+[m[32m        FROM Facture[m
[32m+[m[32m        ORDER BY date_facture ASC;[m
[32m+[m[32m    """)[m
[32m+[m[32m    factures_triees = c.fetchall()[m
[32m+[m
[32m+[m[32m    # Supprimer les anciennes factures[m
[32m+[m[32m    c.execute("DELETE FROM Facture;")[m
 [m
[31m-def ajouter_mesures(nb_jours):[m
[32m+[m[32m    # R√©ins√©rer les factures tri√©es[m
[32m+[m[32m    for facture in factures_triees:[m
[32m+[m[32m        c.execute("""[m
[32m+[m[32m            INSERT INTO Facture (id, id_logement, type_facture, date_facture, montant, valeur_consommation)[m
[32m+[m[32m            VALUES (?, ?, ?, ?, ?, ?);[m
[32m+[m[32m        """, ([m
[32m+[m[32m            facture['id'],[m
[32m+[m[32m            facture['id_logement'],[m
[32m+[m[32m            facture['type_facture'],[m
[32m+[m[32m            facture['date_facture'],[m
[32m+[m[32m            facture['montant'],[m
[32m+[m[32m            facture['valeur_consommation'][m
[32m+[m[32m        ))[m
[32m+[m[32m        print(facture['date_facture'])[m
[32m+[m[32m    print("Factures tri√©es et r√©ins√©r√©es.")[m
[32m+[m
[32m+[m[32mdef ajouter_pieces_pour_logement(id_logement, pieces):[m
     """[m
[31m-    Ajoute des mesures pour chaque capteur/actionneur dans la base de donn√©es.[m
[31m-    :param nb_jours: Nombre de jours pour lesquels g√©n√©rer des mesures.[m
[32m+[m[32m    Attribue des pi√®ces √† un logement sp√©cifique dans la base de donn√©es.[m
[32m+[m
[32m+[m[32m    :param id_logement: ID du logement auquel attribuer les pi√®ces[m
[32m+[m[32m    :param pieces: Liste de dictionnaires contenant les informations des pi√®ces (nom, x, y, z)[m
     """[m
[31m-    today = datetime.now()[m
[31m-    [m
[31m-    plages_mesures = {[m
[31m-        'Temperature': (-20, 50),  # ¬∞C[m
[31m-        'Humidite': (0, 100),      # %[m
[31m-        'Consommation electrique': (0, 1000),  # kWh[m
[31m-        'Niveau eau': (0, 100),    # m¬≥[m
[31m-        'Consommation gaz': (0, 100),  # m¬≥[m
[31m-        'Volets': (0, 100),        # % ouvert[m
[31m-        'Lumieres': (0, 1)         # ON/OFF (0 ou 1)[m
[31m-    }[m
[31m-    [m
[31m-    # R√©cup√©rer tous les capteurs/actionneurs[m
[31m-    c.execute("SELECT id_capteur_actionneur, id_type FROM Capteur_Actionneur")[m
[31m-    capteurs = c.fetchall()[m
[31m-    [m
[31m-    for jour in range(nb_jours):[m
[31m-        date_mesure = (today - timedelta(days=jour)).strftime('%Y-%m-%d %H:%M:%S')[m
[31m-        for capteur in capteurs:[m
[31m-            id_capteur = capteur['id_capteur_actionneur'][m
[31m-            id_type = capteur['id_type'][m
[31m-            [m
[31m-            # R√©cup√©rer le type du capteur/actionneur pour d√©finir la plage[m
[31m-            c.execute("SELECT nom_type FROM Type_Capteur_Actionneur WHERE id_type_capteur_actionneur = ?", (id_type,))[m
[31m-            type_capteur = c.fetchone()['nom_type'][m
[31m-            [m
[31m-            # Obtenir la plage de valeurs[m
[31m-            min_val, max_val = plages_mesures.get(type_capteur, (0, 0))[m
[31m-            valeur = round(random.uniform(min_val, max_val), 2)[m
[31m-            [m
[31m-            # Ins√©rer la mesure dans la base de donn√©es[m
[31m-            c.execute("""[m
[31m-                INSERT INTO Mesure (id_capteur_actionneur, valeur, date_insertion)[m
[31m-                VALUES (?, ?, ?)[m
[31m-            """, (id_capteur, valeur, date_mesure))[m
[32m+[m[32m    conn = sqlite3.connect('database.db')[m
[32m+[m[32m    c = conn.cursor()[m
[32m+[m
[32m+[m[32m    for piece in pieces:[m
[32m+[m[32m        c.execute("""[m
[32m+[m[32m            INSERT INTO Piece (nom, x, y, z, id_logement)[m
[32m+[m[32m            VALUES (?, ?, ?, ?, ?)[m
[32m+[m[32m        """, (piece['nom'], piece['x'], piece['y'], piece['z'], id_logement))[m
     [m
[31m-    print(f"‚úÖ Mesures ajout√©es sur les {nb_jours} derniers jours pour tous les capteurs/actionneurs.")[m
[32m+[m[32m    conn.commit()[m
[32m+[m[32m    conn.close()[m
[32m+[m[32m    print(f"Pi√®ces ajout√©es pour le logement {id_logement}.")[m
[32m+[m
[32m+[m[32m# Exemple d'utilisation[m
[32m+[m[32mpieces_logement_2 = [[m
[32m+[m[32m    {'nom': 'Salon', 'x': 1, 'y': 2, 'z': 0},[m
[32m+[m[32m    {'nom': 'Cuisine', 'x': 3, 'y': 4, 'z': 0},[m
[32m+[m[32m    {'nom': 'Salle de bain', 'x': 5, 'y': 6, 'z': 0},[m
[32m+[m[32m    {'nom': 'Chambre', 'x': 7, 'y': 8, 'z': 0}[m
[32m+[m[32m][m
[32m+[m
[32m+[m[32m#ajouter_pieces_pour_logement(id_logement=2, pieces=pieces_logement_2)[m
[32m+[m[32mimport random[m
[32m+[m
[32m+[m[32mdef ajouter_capteurs_par_piece(session, logement_id, types_capteurs, capteurs_par_type, capteurs_par_piece):[m
[32m+[m[32m    """[m
[32m+[m[32m    Ajoute des capteurs √† chaque pi√®ce d'un logement.[m
[32m+[m
[32m+[m[32m    Args:[m
[32m+[m[32m        session: Session de la base de donn√©es.[m
[32m+[m[32m        logement_id (int): ID du logement.[m
[32m+[m[32m        types_capteurs (list): Liste des types de capteurs disponibles (nom_type).[m
[32m+[m[32m        capteurs_par_type (int): Nombre de capteurs √† cr√©er pour chaque type.[m
[32m+[m[32m        capteurs_par_piece (int): Nombre minimal de capteurs par pi√®ce.[m
[32m+[m[32m    """[m
[32m+[m[32m    # R√©cup√©rer les pi√®ces du logement[m
[32m+[m[32m    pieces = session.exec(select(Piece).where(Piece.id_logement == logement_id)).all()[m
[32m+[m
[32m+[m[32m    if not pieces:[m
[32m+[m[32m        print(f"Aucune pi√®ce trouv√©e pour le logement {logement_id}")[m
[32m+[m[32m        return[m
[32m+[m
[32m+[m[32m    # R√©cup√©rer les types de capteurs disponibles[m
[32m+[m[32m    types_disponibles = session.exec(select(Type_Capteur_Actionneur).where(Type_Capteur_Actionneur.nom_type.in_(types_capteurs))).all()[m
[32m+[m[32m    if not types_disponibles:[m
[32m+[m[32m        print("Aucun type de capteur disponible correspondant.")[m
[32m+[m[32m        return[m
 [m
[31m-#Appel des fonctions[m
[31m-#ajouter_factures(13, 10)[m
[31m-#ajouter_mesures(30)[m
[32m+[m[32m    # Ajouter des capteurs pour chaque pi√®ce[m
[32m+[m[32m    for piece in pieces:[m
[32m+[m[32m        print(f"Ajout de capteurs pour la pi√®ce : {piece.nom}")[m
 [m
[32m+[m[32m        # Assurer un nombre minimal de capteurs par pi√®ce[m
[32m+[m[32m        for _ in range(capteurs_par_piece):[m
[32m+[m[32m            type_capteur = random.choice(types_disponibles)[m
[32m+[m[32m            nouveau_capteur = Capteur_Actionneur([m
[32m+[m[32m                id_type=type_capteur.id_type_capteur_actionneur,[m
[32m+[m[32m                nom=f"{type_capteur.nom_type} - {piece.nom}",[m
[32m+[m[32m                reference_commerciale=f"REF-{type_capteur.nom_type}-{random.randint(1000, 9999)}",[m
[32m+[m[32m                reference_piece=piece.id_piece,[m
[32m+[m[32m                port_communication="OFF"  # Par d√©faut, d√©sactiv√©[m
[32m+[m[32m            )[m
[32m+[m[32m            session.add(nouveau_capteur)[m
[32m+[m
[32m+[m[32m        # Ajouter des capteurs suppl√©mentaires par type[m
[32m+[m[32m        for type_capteur in types_disponibles:[m
[32m+[m[32m            for _ in range(capteurs_par_type):[m
[32m+[m[32m                nouveau_capteur = Capteur_Actionneur([m
[32m+[m[32m                    id_type=type_capteur.id_type_capteur_actionneur,[m
[32m+[m[32m                    nom=f"{type_capteur.nom_type} - {piece.nom}",[m
[32m+[m[32m                    reference_commerciale=f"REF-{type_capteur.nom_type}-{random.randint(1000, 9999)}",[m
[32m+[m[32m                    reference_piece=piece.id_piece,[m
[32m+[m[32m                    port_communication="OFF"  # Par d√©faut, d√©sactiv√©[m
[32m+[m[32m                )[m
[32m+[m[32m                session.add(nouveau_capteur)[m
[32m+[m
[32m+[m[32m    session.commit()[m
[32m+[m[32m    print(f"Capteurs ajout√©s pour les pi√®ces du logement {logement_id}.")[m
[32m+[m
[32m+[m[32mfrom sqlmodel import Session[m
[32m+[m
[32m+[m[32m# Exemple d'utilisation[m
[32m+[m[32mwith Session(engine) as session:[m
[32m+[m[32m    ajouter_capteurs_par_piece([m
[32m+[m[32m        session=session,[m
[32m+[m[32m        logement_id=2,  # ID du logement cible[m
[32m+[m[32m        types_capteurs=["Temperature", "Humidite", "Consommation √©lectrique", "Gaz"],  # Types de capteurs[m
[32m+[m[32m        capteurs_par_type=2,  # Nombre de capteurs par type √† ajouter[m
[32m+[m[32m        capteurs_par_piece=1  # Nombre minimal de capteurs par pi√®ce[m
[32m+[m[32m    )[m
[32m+[m
[32m+[m[32m# Appel des fonctions[m
[32m+[m[32m#c.execute("DELETE FROM Facture;")[m
[32m+[m[32m#c.execute("UPDATE sqlite_sequence SET seq = 0 WHERE name = 'Facture';")[m
[32m+[m[32m#ajouter_factures(id_logement=2, nb_jours=120)  # Ajout de factures sur les 30 derniers jours[m
[32m+[m[32m#trier_factures()  # Tri des factures par date[m
[32m+[m[32m#c.execute("SELECT * FROM Facture ORDER BY date_facture ASC;")[m
 # Validation des modifications[m
 conn.commit()[m
 # Fermeture de la connexion[m
 conn.close()[m
[31m-print("‚úÖDonn√©es ajout√©es et tri√©es avec succ√®s dans la base de donn√©es.") [m
\ No newline at end of file[m
[32m+[m[32mprint("Donn√©es ajout√©es et tri√©es avec succ√®s dans la base de donn√©es.")[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m# Appel des fonctions pour ajouter des donn√©es[m[41m [m
[32m+[m[32m#ajouter_mesures(id_capteur_actionneur = random.randint(1,2), nb_mesures = 1000)[m[41m  [m
[32m+[m[32m#ajouter_mesures(id_capteur_actionneur = random.randint(1,2), nb_mesures = 1000)[m
[1mdiff --git a/templates/configuration.html b/templates/configuration.html[m
[1mindex a3eaa09..3555564 100644[m
[1m--- a/templates/configuration.html[m
[1m+++ b/templates/configuration.html[m
[36m@@ -13,29 +13,15 @@[m
   <!-- üöÄ Barre de Navigation -->[m
   <nav class="navbar navbar-expand-lg navbar-dark bg-dark shadow sticky-top">[m
     <div class="container-fluid">[m
[31m-      <!-- Onglets Gauche -->[m
[31m-      <div class="nav-left navbar-nav">[m
[32m+[m[32m      <a class="navbar-brand" href="/">üè† Econnect Home</a>[m[41m[m
[32m+[m[32m      <div class="navbar-nav">[m[41m[m
         <a class="nav-link" href="/">Accueil</a>[m
[31m-        <a class="nav-link active" href="/consommation">Consommation</a>[m
[31m-      </div>[m
[31m-       <!-- Logo Centr√© -->[m
[31m-      <a class="navbar-brand logo-container mx-auto" href="/">[m
[31m-        <img src="/static/images/logo.png" alt="Logo Econnect Home">[m
[31m-      </a>[m
[31m-[m
[31m-      <!-- Onglets Droite -->[m
[31m-      <div class="nav-right navbar-nav">[m
[32m+[m[32m        <a class="nav-link" href="/consommation">Consommation</a>[m[41m[m
         <a class="nav-link" href="/etat_capteurs">√âtat des capteurs</a>[m
         <a class="nav-link" href="/economies">√âconomies</a>[m
[31m-        <a class="nav-link" href="/configuration">Configuration</a>[m
[32m+[m[32m        <a class="nav-link active" href="/configuration">Configuration</a>[m[41m[m
       </div>[m
     </div>[m
[31m-[m
[31m-      <!-- Bouton Hamburger pour Mobile -->[m
[31m-      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">[m
[31m-        <span class="navbar-toggler-icon"></span>[m
[31m-      </button>[m
[31m-    </div>[m
   </nav>[m
 [m
   <!-- üè† Gestion des Logements -->[m
[36m@@ -433,7 +419,7 @@[m [mfunction chargerPieces(logementId) {[m
 [m
 [m
 function chargerTypesCapteurs() {[m
[31m-  fetch('/api/types_capteurs_actionneurs/')[m
[32m+[m[32m  fetch('/api/types_capteurs_actionneurs')[m[41m[m
     .then(response => response.json())[m
     .then(data => {[m
       const typeSelector = document.getElementById('type-capteur');[m
